#%%

def a_star(maze, start, end):
	class Node():
		def __init__(self, parent, position=None, distance=None):
			self.parent = parent
			self.position = position
			self.distance = distance

	size_x = len(maze) - 1
	size_y = len(maze[0]) - 1
	next_list = [Node(None, start)]

	while len(next_list) > 0:
		current = min(next_list, key=lambda e: e.distance)
		next_list.remove(current)
		maze[current.position[0]][current.position[1]] = 2

		if current.position == end:
			path = []
			while current is not None:
				path.append(current.position)
				current = current.parent
			return path[::-1]

		for new_pos in [(0, -1), (0, 1), (-1, 0), (1, 0)]:
			new_pos = (current.position[0] + new_pos[0], current.position[1] + new_pos[1])
			if (new_pos[0] < 0 or new_pos[1] < 0
				or new_pos[0] > size_x or new_pos[1] > size_y
				or maze[new_pos[0]][new_pos[1]]):
				continue
			next_list.append(Node(current, new_pos, abs(new_pos[0] - end[0]) + abs(new_pos[1] - end[1])))

def a_star_char(maze_char):
	start = end = None
	x = y = 0
	maze = []
	for e in maze_char:
		maze.append([])
		y = 0
		for c in e:
			if c == 'A':
				start = (x, y)
				maze[x].append(0)
			elif c == 'B':
				end = (x, y)
				maze[x].append(0)
			else:
				maze[x].append(int(c))
			y += 1
		x += 1
	return a_star(maze, start, end)


#%%

a_star_char([['A', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
			['1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
			['1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0'],
			['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
			['1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0'],
			['0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1'],
			['0', '1', '0', '0', '0', 'B', '0', '0', '0', '0', '0', '1', '1', '1', '1'],
			['1', '1', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
			['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']])


#%%

a_star_char([['A', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1'],
			['0', '0', '0', '0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1'],
			['1', '1', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0'],
			['1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '0'],
			['1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '1', '0'],
			['0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0'],
			['0', '1', '1', '0', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1'],
			['0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'],
			['0', '1', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0'],
			['0', '1', '0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1', '1', '0'],
			['1', '0', '0', '1', '1', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0'],
			['0', '0', '0', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1'],
			['1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0'],
			['1', '0', '1', '0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '1'],
			['1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '1', '0', '0', 'B']])
